name: IntelliFin E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - auth
          - dashboard

env:
  NODE_VERSION: '18'
  POSTGRES_DB: intellifin-core-test
  POSTGRES_USER: intellifin-core
  POSTGRES_PASSWORD: Chizzy@1!

jobs:
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            backend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps

      - name: Setup test database
        run: |
          PGPASSWORD=${{ env.POSTGRES_PASSWORD }} psql -h localhost -U ${{ env.POSTGRES_USER }} -d ${{ env.POSTGRES_DB }} -c "SELECT 1;"

      - name: Run database migrations
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        run: npx prisma migrate deploy

      - name: Seed test database
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        run: npx prisma db seed

      - name: Start backend service
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
          JWT_SECRET: test-jwt-secret-key-for-ci
          JWT_REFRESH_SECRET: test-jwt-refresh-secret-key-for-ci
          NODE_ENV: test
        run: |
          npm run start:dev &
          echo $! > backend.pid

      - name: Wait for backend to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3001/api/v1/health; do sleep 2; done'

      - name: Start frontend service
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001/api/v1
          NODE_ENV: test
        run: |
          npm run dev &
          echo $! > frontend.pid

      - name: Wait for frontend to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Run E2E tests
        working-directory: ./frontend
        env:
          CI: true
        run: |
          if [ "${{ github.event.inputs.test_suite }}" = "auth" ]; then
            npm run test:e2e:auth
          elif [ "${{ github.event.inputs.test_suite }}" = "dashboard" ]; then
            npm run test:e2e:dashboard
          else
            npm run test:e2e
          fi

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: frontend/test-results/
          retention-days: 30

      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: frontend/test-results/*/test-failed-*.png
          retention-days: 30

      - name: Upload videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: videos
          path: frontend/test-results/*/video.webm
          retention-days: 30

      - name: Stop services
        if: always()
        run: |
          if [ -f backend/backend.pid ]; then
            kill $(cat backend/backend.pid) || true
          fi
          if [ -f frontend/frontend.pid ]; then
            kill $(cat frontend/frontend.pid) || true
          fi

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: always()
    
    steps:
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: playwright-report
          path: ./playwright-report

      - name: Generate test summary
        run: |
          echo "## 🧪 E2E Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.e2e-tests.result }}" = "success" ]; then
            echo "✅ **All E2E tests passed successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **E2E tests failed. Please check the logs and artifacts.**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- 🔐 Authentication flows" >> $GITHUB_STEP_SUMMARY
          echo "- 📧 Email verification" >> $GITHUB_STEP_SUMMARY
          echo "- 🚪 Login/logout functionality" >> $GITHUB_STEP_SUMMARY
          echo "- 🛡️ Protected route access" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 Token refresh mechanisms" >> $GITHUB_STEP_SUMMARY
          echo "- ⚠️ Error handling scenarios" >> $GITHUB_STEP_SUMMARY
          echo "- 📱 Mobile responsiveness" >> $GITHUB_STEP_SUMMARY
          echo "- ♿ Accessibility compliance" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 [Playwright Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- 📸 Screenshots (on failure)" >> $GITHUB_STEP_SUMMARY
          echo "- 🎥 Videos (on failure)" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 Test traces" >> $GITHUB_STEP_SUMMARY

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const testResult = '${{ needs.e2e-tests.result }}';
            const emoji = testResult === 'success' ? '✅' : '❌';
            const status = testResult === 'success' ? 'passed' : 'failed';
            
            const comment = `## ${emoji} E2E Test Results
            
            The end-to-end tests have **${status}**.
            
            ### Test Coverage
            - 🔐 Authentication flows
            - 📧 Email verification  
            - 🚪 Login/logout functionality
            - 🛡️ Protected route access
            - 🔄 Token refresh mechanisms
            - ⚠️ Error handling scenarios
            - 📱 Mobile responsiveness
            - ♿ Accessibility compliance
            
            ### Artifacts
            - 📊 [View Playwright Report](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            ${testResult !== 'success' ? '- 📸 Screenshots and videos available in artifacts' : ''}
            
            ---
            *Automated E2E testing powered by Playwright*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './frontend'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
